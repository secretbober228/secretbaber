-- jitter_fix_gs.lua
-- Clean version for GameSense (SKIT API only)
-- Author: rewritten by ChatGPT

local ref_antiaim_correction = ui.reference("Rage", "Other", "Anti-aim correction")

local enable_ref = ui.new_checkbox("Rage", "Other", "Jitter Fix")

local player_data = {}

-- 🧹 очистка данных
local function erase_player_data()
    for k in pairs(player_data) do
        player_data[k] = nil
    end
end

-- 🔄 функции управления body yaw
local function unset_player_body_yaw(entindex)
    plist.set(entindex, "Force body yaw", false)
    plist.set(entindex, "Force body yaw value", 0)
end

local function set_player_body_yaw(entindex, value)
    plist.set(entindex, "Force body yaw", true)
    plist.set(entindex, "Force body yaw value", value)
end

-- 📏 расчёт максимального дельта-десинка
local function get_max_desync_delta(animstate)
    if not animstate then return 0 end

    local duck_amount = animstate.duck_amount
    local stop_to_full_running_fraction = animstate.stop_to_full_running_fraction

    local speed_fraction = math.max(0, math.min(animstate.feet_speed_forwards_or_sideways, 1))
    local speed_factor = math.max(0, math.min(animstate.feet_speed_unknown_forwards_or_sideways, 1))

    local value = ((stop_to_full_running_fraction * -0.3) - 0.2) * speed_fraction + 1

    if duck_amount > 0 then
        value = value + ((duck_amount * speed_factor) * (0.5 - value))
    end

    return animstate.max_yaw * value
end

-- 🧠 нормализация угла (-180..180)
local function normalize_angle(yaw)
    yaw = (yaw + 180) % 360 - 180
    return yaw
end

-- 🎯 ограничение значения (кламп)
local function clamp(val, min, max)
    return math.max(min, math.min(max, val))
end

-- 🕵️ получить список врагов
local function get_enemies()
    local player_resource = entity.get_player_resource()
    if not player_resource then return {} end

    local enemies = {}
    for i = 1, globals.maxplayers() do
        if entity.is_enemy(i) and entity.is_alive(i) then
            table.insert(enemies, i)
        end
    end

    return enemies
end

-- ♻️ сброс всех игроков
local function reset_player_list()
    for _, enemy in ipairs(get_enemies()) do
        unset_player_body_yaw(enemy)
    end
end

-- 🚫 очистка при выключении
local function on_shutdown()
    reset_player_list()
    erase_player_data()
end

-- ❌ при промахе
local function on_aim_miss(e)
    local target = e.target
    if not target then return end

    local data = player_data[target]
    if not data then return end

    local forced = plist.get(target, "Force body yaw")
    if not forced then return end

    local reason = e.reason
    if reason == "?" or reason == "resolver" or reason == "correction" then
        data.misses = data.misses + 1
    end
end

-- 🧍 сброс данных при респавне локального игрока
local function on_player_spawn(e)
    local me = entity.get_local_player()
    local userid = client.userid_to_entindex(e.userid)
    if userid == me then
        erase_player_data()
    end
end

-- 🔁 основная логика фикса
local ffi = require("ffi")

ffi.cdef[[
struct animstate {
    char pad[0x18];
    void* base_entity;
    void* active_weapon;
    void* last_active_weapon;
    float last_clientside_animation_update_time;
    int last_clientside_animation_update_framecount;
    float eye_pitch;
    float eye_yaw;
    float pitch_limit;
    float yaw_limit;
    float max_yaw;
    float duck_amount;
    float feet_speed_forwards_or_sideways;
    float feet_speed_unknown_forwards_or_sideways;
    float stop_to_full_running_fraction;
};
]]

-- Заменяем старую функцию get_animstate на безопасную версию
local function get_animstate(ent)
    if not entity.is_alive(ent) then return nil end

    local duck_amount = entity.get_prop(ent, "m_flDuckAmount") or 0
    local velocity_x = entity.get_prop(ent, "m_vecVelocity[0]") or 0
    local velocity_y = entity.get_prop(ent, "m_vecVelocity[1]") or 0
    local speed = math.sqrt(velocity_x * velocity_x + velocity_y * velocity_y) / 260
    local max_yaw = 58 -- стандартное значение в csgo для max desync
    local stop_to_full_running_fraction = 0.8

    return {
        duck_amount = duck_amount,
        feet_speed_forwards_or_sideways = speed,
        feet_speed_unknown_forwards_or_sideways = speed,
        stop_to_full_running_fraction = stop_to_full_running_fraction,
        max_yaw = max_yaw
    }
end


local function on_net_update_end()
    local me = entity.get_local_player()
    if not me or not entity.is_alive(me) then return end

    ui.set(ref_antiaim_correction, true)

    local my_origin = { entity.get_origin(me) }

    for _, enemy in ipairs(get_enemies()) do
        local data = player_data[enemy]
        if not data then
            data = { misses = 0, last_yaw = 0, last_yaw_update_time = 0 }
            player_data[enemy] = data
        end

        local correction_active = plist.get(enemy, "Correction active")
        if not correction_active or data.misses > 2 then
            unset_player_body_yaw(enemy)
            goto continue
        end

        local animstate = get_animstate(enemy)
        if not animstate then goto continue end

        local head_pos = { entity.hitbox_position(enemy, 0) }
        if not head_pos[1] then goto continue end

        local dx = head_pos[1] - my_origin[1]
        local dy = head_pos[2] - my_origin[2]
        local target_yaw = math.deg(math.atan2(dy, dx))

        local eye_yaw = entity.get_prop(enemy, "m_angEyeAngles[1]") or 0
        local yaw = normalize_angle(target_yaw - eye_yaw + 180)

        if data.last_yaw ~= yaw then
            if math.abs(data.last_yaw - yaw) >= 20 and math.abs(data.last_yaw - yaw) <= 340 then
                data.last_yaw_update_time = globals.tickcount() + 15
            end
            data.last_yaw = yaw
        end

        local is_jitter = data.last_yaw_update_time > globals.tickcount()
        if not is_jitter then
            unset_player_body_yaw(enemy)
            goto continue
        end

        local mod = (data.misses == 0) and 1 or -1
        local side = clamp(yaw, -1, 1) * mod

        local max_desync = get_max_desync_delta(animstate)
        set_player_body_yaw(enemy, max_desync * side)

        ::continue::
    end
end

-- 🔘 включение/выключение
ui.set_callback(enable_ref, function()
    local enabled = ui.get(enable_ref)

    if enabled then
        client.set_event_callback("shutdown", on_shutdown)
        client.set_event_callback("aim_miss", on_aim_miss)
        client.set_event_callback("player_spawn", on_player_spawn)
        client.set_event_callback("net_update_end", on_net_update_end)
    else
        client.unset_event_callback("shutdown", on_shutdown)
        client.unset_event_callback("aim_miss", on_aim_miss)
        client.unset_event_callback("player_spawn", on_player_spawn)
        client.unset_event_callback("net_update_end", on_net_update_end)
        on_shutdown()
    end
end)


-- jitter_correction_clean.lua
-- Clean standalone Jitter Correction for GameSense (SKIT API only)
-- Provides: Default / Experimental modes, body yaw forcing, ESP flags, logs.
-- Author: rewritten by ChatGPT
local vector = require("vector")

-- ===== UI =====
local ui_enabled = ui.new_checkbox("Rage", "Other", "Jitter Correction")
local ui_mode = ui.new_combobox("Rage", "Other", "Mode", "Default", "Experimental")
local ui_min_value = ui.new_slider("Rage", "Other", "Min value", 1, 60, 2)
local ui_max_value = ui.new_slider("Rage", "Other", "Max value", 1, 60, 2)
local ui_disable_fake_indicator = ui.new_checkbox("Rage", "Other", "Disable fake indicator")

ui.set_visible(ui_mode, false)
ui.set_visible(ui_min_value, false)
ui.set_visible(ui_max_value, false)
ui.set_visible(ui_disable_fake_indicator, false)

function Enabledkek()
    if ui.get(ui_enabled) == true then
        ui.set_visible(ui_mode, true)
        ui.set_visible(ui_min_value, true)
        ui.set_visible(ui_max_value, true)
        ui.set_visible(ui_disable_fake_indicator, true)
    else
        ui.set_visible(ui_mode, false)
        ui.set_visible(ui_min_value, false)
        ui.set_visible(ui_max_value, false)
        ui.set_visible(ui_disable_fake_indicator, false)
    end
end

local function UpdateVisibility()
    if ui.get(ui_mode) == "Experimental" then
        ui.set_visible(ui_min_value, false)
        ui.set_visible(ui_max_value, false)
    else
        ui.set_visible(ui_min_value, true)
        ui.set_visible(ui_max_value, true)
    end
end

-- ===== Helpers =====
local function clamp(v, a, b) return math.max(a, math.min(b, v)) end
local function normalize(angle)
    angle = (angle + 180) % 360
    if angle < 0 then angle = angle + 360 end
    return angle - 180
end
local function toticks(time)
    if not time then return 0 end
    return math.floor(time / globals.tickinterval() + 0.5)
end

-- ===== plist helpers =====
local function unset_player_body_yaw(entindex)
    plist.set(entindex, "Force body yaw", false)
    plist.set(entindex, "Force body yaw value", 0)
end

local function set_player_body_yaw(entindex, value)
    plist.set(entindex, "Force body yaw", true)
    plist.set(entindex, "Force body yaw value", value)
end

-- ===== Common state =====
local default = {}
local experimental = {}
local info = {}                -- public info per-player (yaw, yaw_delta, simtime_delta)
local data_angles = {}        -- angle values for ESP (per player)
local callbacks_registered = false

-- ===== Default mode implementation =====
do
    local records = {} -- per-player record table

    local hitgroups = {
        [0]  = 'generic',
        [1]  = 'head',
        [2]  = 'chest',
        [3]  = 'stomach',
        [4]  = 'left arm',
        [5]  = 'right arm',
        [6]  = 'left leg',
        [7]  = 'right leg',
        [8]  = 'neck',
        [10] = 'gear'
    }

    local function get_server_time(player)
        return (entity.get_prop(player, "m_nTickBase") or 0) * globals.tickinterval()
    end

    local function get_simulation_time(player)
        return entity.get_prop(player, "m_flSimulationTime") or 0
    end

    local function new_record()
        return {
            is_simtime_update = false,
            is_jittering = false,
            is_jittering_prev = false,
            server_tick = 0,
            prev_simtime = 0,
            simtime = 0,
            prev_eye_yaw = 0,
            eye_angles = { x = 0, y = 0, z = 0 },
            prev_rotation = 0,
            rotation = { x = 0, y = 0, z = 0 },
            prev_delta = 0,
            delta = 0,
            fakelag_ticks = 0,
            choked_ticks = 0
        }
    end

    local function update_records(player)
        records[player] = records[player] or new_record()
        local record = records[player]

        local simtime = get_simulation_time(player)
        local server_tick = get_server_time(player)

        local rotation_prop = entity.get_prop(player, "m_angRotation") or {0,0,0}
        local eye_angles_prop = entity.get_prop(player, "m_angEyeAngles") or {0,0,0}

        record.server_tick = server_tick

        record.prev_simtime = record.simtime
        record.simtime = simtime

        record.is_simtime_update = record.simtime ~= record.prev_simtime

        if record.is_simtime_update then
            -- new simtime -> real packet arrived
            record.fakelag_ticks = record.choked_ticks
            record.choked_ticks = 0

            local eye_x = entity.get_prop(entindex, "m_angEyeAngles[0]") or 0
            local eye_y = entity.get_prop(entindex, "m_angEyeAngles[1]") or 0
            local eye_z = 0

            local rot_x = entity.get_prop(entindex, "m_angRotation[0]") or 0
            local rot_y = entity.get_prop(entindex, "m_angRotation[1]") or 0
            local rot_z = entity.get_prop(entindex, "m_angRotation[2]") or 0

            record.prev_eye_yaw = record.eye_angles.y or 0
            record.eye_angles = { x = eye_x, y = eye_y, z = eye_z }

            record.prev_rotation = record.rotation.y or 0
            record.rotation = { x = rot_x, y = rot_y, z = rot_z }

            record.prev_delta = record.delta
            record.delta = normalize((record.eye_angles.y or 0) - (record.prev_eye_yaw or 0))

            record.is_prev_jittering = record.is_jittering
            record.is_jittering = (record.delta > 0 and record.prev_delta < 0) or (record.delta < 0 and record.prev_delta > 0)
        else
            record.choked_ticks = record.choked_ticks + 1
        end


        info[player] = {
            yaw = record.eye_angles.y,
            yaw_delta = record.delta,
            simtime_delta = toticks(record.simtime - record.prev_simtime)
        }
    end

    local function update_correction(player)
        local record = records[player]
        if not record then return end

        local jitter_side = -1
        if record.delta > 0 then jitter_side = 1 end

        local server_tick = toticks(record.server_tick)
        local latency_tick = toticks(client.real_latency() or 0)

        local arrival_tick = server_tick + latency_tick + 1
        local current_tick = arrival_tick - server_tick - 1

        -- compute ticks to predict
        local tickcount = globals.tickcount()
        local ticks_to_predict_before_arrival = math.min(math.max(arrival_tick - current_tick, 0) + (tickcount - server_tick), 8)

        for _ = 1, ticks_to_predict_before_arrival do
            jitter_side = -jitter_side
        end

        local minv = ui.get(ui_min_value)
        local maxv = ui.get(ui_max_value)
        if minv > maxv then minv, maxv = maxv, minv end

        local avg_body_yaw = jitter_side * math.random(minv, maxv)
        avg_body_yaw = clamp(avg_body_yaw, -60, 60)

        set_player_body_yaw(player, avg_body_yaw)
        data_angles[player] = math.floor(avg_body_yaw)
    end

    local function on_net_update_default()
        local local_player = entity.get_local_player()
        if not local_player then return end

        local enemies = entity.get_players(true)
        for i = 1, #enemies do
            local enemy = enemies[i]
            if not entity.is_alive(enemy) or entity.is_dormant(enemy) or not entity.is_enemy(enemy) then
                -- ensure unset
                unset_player_body_yaw(enemy)
            else
                update_records(enemy)
                -- if correction disabled or misses too many (no misses tracking here), skip
                -- use the ui enabled as main gate
                if ui.get(ui_enabled) then
                    update_correction(enemy)
                else
                    unset_player_body_yaw(enemy)
                    data_angles[enemy] = nil
                end
            end
        end
    end

    local function on_shutdown_default()
        local players = entity.get_players(true)
        for i = 1, #players do
            unset_player_body_yaw(players[i])
        end
    end

    local function on_aim_hit_default(e)
        local target = e.target
        if not target then return end
        local group = hitgroups[e.hitgroup] or "?"
        local angle = data_angles[target] or 0
        local str = string.format("{JITTER CORRECTION} registered shot at %s in %s for %s damage (desync: %s°)",
            entity.get_player_name(target) or "?", group, tostring(e.damage or 0), tostring(angle))
        print(str)
    end

    default.set_active = function(active)
        if active then
            client.set_event_callback("net_update_end", on_net_update_default)
            client.set_event_callback("aim_hit", on_aim_hit_default)
            client.set_event_callback("shutdown", on_shutdown_default)
        else
            client.unset_event_callback("net_update_end", on_net_update_default)
            client.unset_event_callback("aim_hit", on_aim_hit_default)
            client.unset_event_callback("shutdown", on_shutdown_default)
            -- clear
            local players = entity.get_players(true)
            for i = 1, #players do data_angles[players[i]] = nil; unset_player_body_yaw(players[i]) end
        end
    end
end

-- ===== Experimental mode implementation =====
do
    local records = { cur = {}, prev = {}, pre_prev = {}, pre_pre_prev = {} }
    local types = {}         -- types[player] = { duck = {}, running = {}, standing = {}, air = {} }
    local desync_state = {}

    local function normalize_angle(a)
        while a > 180 do a = a - 360 end
        while a < -180 do a = a + 360 end
        return a
    end

    local function calculate_angle(from_vec, to_vec)
        local dx = to_vec.x - from_vec.x
        local dy = to_vec.y - from_vec.y
        local ang = math.deg(math.atan2(dy, dx))
        return normalize_angle(ang)
    end

    local function update_records_exp(local_player)
        local players = entity.get_players(true)
        if #players == 0 then
            records = { cur = {}, prev = {}, pre_prev = {}, pre_pre_prev = {} }
            return
        end

        for _, player in ipairs(players) do
            if entity.is_alive(player) and not entity.is_dormant(player) and entity.is_enemy(player) then
                -- get simtime (account for esp flags indicating something like lag?)
                local esp_flags = (entity.get_esp_data(player).flags) or 0
                local sim_time = toticks(entity.get_prop(player, "m_flSimulationTime") or 0)
                if bit and (bit.band(esp_flags, bit.lshift(1, 17)) ~= 0) then
                    sim_time = sim_time - 14
                end

                if (not records.cur[player]) or (sim_time - (records.cur[player].simtime or 0) >= 1) then
                    records.pre_pre_prev[player] = records.pre_prev[player]
                    records.pre_prev[player] = records.prev[player]
                    records.prev[player] = records.cur[player]

                    local local_pos = vector(entity.get_prop(local_player, "m_vecOrigin") or {0,0,0})
                    local eye_angles_prop = entity.get_prop(player, "m_angEyeAngles") or {0,0,0}
                    local player_pos_prop = entity.get_prop(player, "m_vecOrigin") or {0,0,0}

                    local eye_angles = { x = entity.get_prop(entindex, "m_angEyeAngles[0]") or 0, y = entity.get_prop(entindex, "m_angEyeAngles[1]") or 0, z = 0 }
                    local player_pos = vector(player_pos_prop)
                    local yaw_delta = math.floor(normalize_angle(eye_angles.y - calculate_angle(local_pos, player_pos)))

                    local duck_amount = entity.get_prop(player, "m_flDuckAmount") or 0
                    local is_on_ground = (bit and (bit.band(entity.get_prop(player, "m_fFlags") or 0, 1) == 1)) or ((entity.get_prop(player, "m_fFlags") or 0) % 2 == 1)
                    local vel = vector(entity.get_prop(player, "m_vecVelocity") or {0,0,0}):length2d()

                    local stance
                    if is_on_ground then
                        if duck_amount == 1 then stance = "duck"
                        elseif vel > 1.2 then stance = "running"
                        else stance = "standing" end
                    else
                        stance = "air"
                    end

                    local weapon = entity.get_player_weapon(player)
                    local last_shot_time = weapon and entity.get_prop(weapon, "m_fLastShotTime") or nil

                    if records.cur[player] ~= nil then
                        info[player] = {
                            yaw = eye_angles.y,
                            yaw_delta = eye_angles.y - (records.cur[player].eye_yaw or 0),
                            simtime_delta = (sim_time - (records.cur[player].simtime or 0))
                        }
                    end

                    records.cur[player] = {
                        id = player,
                        origin = vector(entity.get_origin(player)),
                        eye_yaw = eye_angles.y,
                        pitch = eye_angles.x,
                        yaw = yaw_delta,
                        yaw_backwards = math.floor(normalize_angle(calculate_angle(local_pos, player_pos))),
                        simtime = sim_time,
                        stance = stance,
                        esp_flags = esp_flags,
                        last_shot_time = last_shot_time
                    }

                    types[player] = types[player] or { duck = {}, running = {}, standing = {}, air = {} }
                end
            end
        end
    end

    local function analyze_desync_targets(local_player)
        if not entity.is_alive(local_player) then return end
        local enemies = entity.get_players(true)
        if #enemies == 0 then return end

        for _, enemy in ipairs(enemies) do
            if not entity.is_alive(enemy) or entity.is_dormant(enemy) or not entity.is_enemy(enemy) then goto continue end

            if not (records.cur[enemy] and records.prev[enemy] and records.pre_prev[enemy] and records.pre_pre_prev[enemy]) then
                goto continue
            end

            local yaw_now = records.cur[enemy].yaw or 0
            local yaw_prev = records.prev[enemy].yaw or 0
            local yaw_delta = math.abs(normalize_angle(yaw_now - yaw_prev))

            local pitch_now = records.cur[enemy].pitch or 0
            local pitch_prev = records.prev[enemy].pitch or 0

            local shot_tick = false
            if records.cur[enemy].last_shot_time then
                local time_since_shot = globals.curtime() - (records.cur[enemy].last_shot_time or 0)
                local ticks = time_since_shot / globals.tickinterval()
                shot_tick = ticks <= math.floor(0.2 / globals.tickinterval())
            end

            local aa_type = nil

            if shot_tick and math.abs(pitch_now - pitch_prev) > 30 and pitch_now < pitch_prev then
                aa_type = "ON SHOT"
            elseif math.abs(pitch_now) > 60 then
                local yaw_diff_1 = normalize_angle(yaw_now - records.prev[enemy].yaw)
                local yaw_diff_2 = normalize_angle(yaw_now - records.pre_prev[enemy].yaw)
                local yaw_diff_3 = normalize_angle(yaw_prev - records.pre_pre_prev[enemy].yaw)

                if yaw_delta > 30 and math.abs(yaw_diff_2) < 15 and math.abs(yaw_diff_3) < 15 then
                    aa_type = "[!!]"
                elseif math.abs(yaw_diff_1) > 15 or math.abs(yaw_diff_2) > 15 then
                    aa_type = "[!!!]"
                end
            end

            if aa_type then
                local stance = records.cur[enemy].stance
                if stance and #types[enemy][stance] < 20 then
                    table.insert(types[enemy][stance], aa_type)
                    if (aa_type == "[!!!]" and yaw_delta > 5) or aa_type == "[!!]" then
                        table.insert(types[enemy][stance], yaw_delta)
                    end
                end
            end

            -- If both pitch high and aa_type present, set force body yaw heuristics
            if pitch_now >= 78 and pitch_prev > 78 then
                local diff = normalize_angle(yaw_now - yaw_prev)
                if aa_type == "[!!]" then
                    plist.set(enemy, "Force body yaw", true)
                    plist.set(enemy, "Force body yaw value", diff > 0 and 60 or -60)
                    data_angles[enemy] = diff > 0 and 60 or -60
                elseif aa_type == "[!!!]" then
                    plist.set(enemy, "Force body yaw", true)
                    plist.set(enemy, "Force body yaw value", diff > 0 and 0 or -60)
                    data_angles[enemy] = diff > 0 and 0 or -60
                else
                    plist.set(enemy, "Force body yaw", false)
                    plist.set(enemy, "Force body yaw value", 0)
                    data_angles[enemy] = 0
                end
            end

            desync_state[enemy] = {
                anti_aim_type = aa_type,
                yaw_delta = normalize_angle(yaw_now - yaw_prev)
            }

            ::continue::
        end
    end

    local function on_net_update_exp()
        local me = entity.get_local_player()
        if not me or not entity.is_alive(me) then return end

        update_records_exp(me)
        analyze_desync_targets(me)
    end

    local function on_shutdown_exp()
        local players = entity.get_players(true)
        for i = 1, #players do
            unset_player_body_yaw(players[i])
        end
    end

    experimental.set_active = function(active)
        if active then
            client.set_event_callback("net_update_end", on_net_update_exp)
            client.set_event_callback("shutdown", on_shutdown_exp)
        else
            client.unset_event_callback("net_update_end", on_net_update_exp)
            client.unset_event_callback("shutdown", on_shutdown_exp)
            for k in pairs(data_angles) do data_angles[k] = nil end
        end
    end
end

-- ===== ESP flag registration (shows L / R) =====
local esp_flag_id = client.register_esp_flag -- alias

client.register_esp_flag("", 255, 255, 255, function(player)
    -- only show if enabled and fake indicator not disabled
    if not ui.get(ui_enabled) then return end
    if ui.get(ui_disable_fake_indicator) then return end

    local angle = data_angles[player]
    if not angle then return end
    if angle > 1 then
        return true, "R"
    elseif angle < -1 then
        return true, "L"
    end
end)

-- ===== mode & enable management =====
local function update_mode_callbacks()
    -- disable all first
    default.set_active(false)
    experimental.set_active(false)

    if not ui.get(ui_enabled) then
        -- clear plists when completely disabled:
        local players = entity.get_players(true)
        for i = 1, #players do unset_player_body_yaw(players[i]); data_angles[players[i]] = nil end
        return
    end

    local mode = ui.get(ui_mode)
    if mode == "Experimental" then
        experimental.set_active(true)
    else
        default.set_active(true)
    end
end

-- initial hookup
ui.set_callback(ui_enabled, function() update_mode_callbacks() end)
ui.set_callback(ui_mode, function() update_mode_callbacks() end)
-- also update when sliders / checkbox change? Not strictly necessary; sliders read at use-time.

-- ensure cleanup on shutdown
client.set_event_callback("shutdown", function()
    local players = entity.get_players(true)
    for i = 1, #players do unset_player_body_yaw(players[i]) end
end)

Enabledkek()
UpdateVisibility()

ui.set_callback(ui_enabled, function ()
    Enabledkek()
end)

ui.set_callback(ui_mode, function ()
    UpdateVisibility()
end)

